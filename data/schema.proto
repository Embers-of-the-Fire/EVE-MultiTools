syntax = "proto2";

package eve_multitools.data;

// Type ID definition
// This mirrors the structure of typeIDs.json in the FSD
message TypeID {
    required double base_price = 1;
    required double capacity = 2;
    optional int32 certificate_template = 3;
    optional int32 description_id = 4;
    repeated int32 designer_ids = 5;
    optional int32 faction_id = 6;
    optional int32 graphic_id = 7;
    required int32 group_id = 8;
    optional int32 icon_id = 9;
    required bool is_dynamic_type = 10;
    optional int32 isis_group_id = 11;
    optional int32 market_group_id = 12;
    optional int32 meta_group_id = 13;
    optional int32 meta_level = 14;
    required int32 portion_size = 15;
    required bool published = 16;
    optional int32 quote_author_id = 17;
    optional int32 quote_id = 18;
    optional int32 race_id = 19;
    required double radius = 20;
    optional int32 sound_id = 21;
    optional int32 tech_level = 22;
    required int32 type_id = 23;
    required int32 type_name_id = 24;
    optional int32 variation_parent_type_id = 25;
    required double volume = 26;
    optional int32 wreck_type_id = 27;
}

// Type dogma definition
// This mirrors the structure of typeDogma.json in the FSD
message TypeDogma {
    // Dogma attribute definition
    message DogmaAttribute {
        required int32 attribute_id = 1;
        required double value = 2;
    }
    
    // Dogma effect definition
    message DogmaEffect {
        required int32 effect_id = 1;
        required bool is_default = 2;
    }
    
    repeated DogmaAttribute dogma_attributes = 1;
    repeated DogmaEffect dogma_effects = 2;
}

// Type material definition
// This mirrors the structure of typeMaterials.json in the FSD
message TypeMaterial {
    // Material definition
    message Material {
        required int32 material_type_id = 1;
        required int32 quantity = 2;
    }
    
    repeated Material materials = 1;
}

// Collection of all type IDs
message TypeCollection {
    message TypeEntry {
        required int32 type_id = 1;
        required TypeID type_data = 2;
    }
    repeated TypeEntry types = 1;
}

// Collection of all type dogma data
message TypeDogmaCollection {
    message TypeDogmaEntry {
        required int32 type_id = 1;
        required TypeDogma type_dogma = 2;
    }
    repeated TypeDogmaEntry type_dogmas = 1;
}

// Collection of all type material data
message TypeMaterialCollection {
    message TypeMaterialEntry {
        required int32 type_id = 1;
        required TypeMaterial type_material = 2;
    }
    repeated TypeMaterialEntry type_materials = 1;
}

// Category definition
message Category {
    required int32 category_id = 1;
    required int32 category_name_id = 2;
    optional int32 icon_id = 3;
    required bool published = 4;
}

// Collection of all categories
message CategoryCollection {
    message CategoryEntry {
        required int32 category_id = 1;
        required Category category_data = 2;
    }
    repeated CategoryEntry categories = 1;
}

// Group definition
message Group {
    required int32 group_id = 1;
    required int32 group_name_id = 2;
    optional int32 icon_id = 3;
    required int32 category_id = 4;
    required bool anchorable = 5;
    required bool fittable_non_singleton = 6;
    required bool anchored = 7;
    required bool published = 8;
    required bool use_base_price = 9;
}

// Collection of all groups
message GroupCollection {
    message GroupEntry {
        required int32 group_id = 1;
        required Group group_data = 2;
    }
    repeated GroupEntry groups = 1;
}

// MetaGroup definition
message MetaGroup {
    required int32 name_id = 1;
    optional int32 icon_id = 2;
}

// Collection of all meta groups
message MetaGroupCollection {
    message MetaGroupEntry {
        required int32 meta_group_id = 1;
        required MetaGroup meta_group_data = 2;
    }
    repeated MetaGroupEntry meta_groups = 1;
}

// Localization string definition
message LocalizationString {
    required string en = 1;
    required string zh = 2;
}

// Collection of all localization strings
message LocalizationCollection {
    message LocalizationEntry {
        required uint32 key = 1;
        required LocalizationString localization_data = 2;
    }
    repeated LocalizationEntry localizations = 1;
}

// Meta UI localization,
// see `res:/localizationfsd/localization_fsd_main.pickle` for more details
message MetaUiLocalizationCollection {
    message MetaUiEntry {
        required string key = 1;
        required uint32 message_id = 2;
    }
    repeated MetaUiEntry meta_ui_entries = 1;
}

// Type localization lookup data
message TypeLocalizationLookup {
    message TypeLocEntry {
        required int32 type_id = 1;
        required uint32 type_name_id = 2;
        optional uint32 type_description_id = 3;
    }
    repeated TypeLocEntry type_entries = 1;
}

message RegionLocalizationLookup {
    message RegionLocEntry {
        required int32 region_id = 1;
        required uint32 name_id = 2;
        optional uint32 description_id = 3;
    }
    repeated RegionLocEntry region_entries = 1;
}

message ConstellationLocalizationLookup {
    message ConstellationLocEntry {
        required int32 constellation_id = 1;
        required uint32 name_id = 2;
    }
    repeated ConstellationLocEntry constellation_entries = 1;
}

message SystemLocalizationLookup {
    message SystemLocEntry {
        required int32 system_id = 1;
        required uint32 name_id = 2;
    }
    repeated SystemLocEntry system_entries = 1;
}

message NpcCorporationLocalizationLookup {
    message NpcCorporationLocEntry {
        required int32 npc_corporation_id = 1;
        required uint32 name_id = 2;
        optional uint32 description_id = 3;
    }
    repeated NpcCorporationLocEntry npc_corporation_entries = 1;
}

message StationOperationLocalizationLookup {
    message StationOperationLocEntry {
        required int32 operation_id = 1;
        required uint32 name_id = 2;
        optional uint32 description_id = 3;
    }
    repeated StationOperationLocEntry station_operation_entries = 1;
}

// Faction definition
message Faction {
    required int32 name_id = 1;
    required int32 description_id = 2;
    optional int32 short_description_id = 3;
    optional int32 corporation_id = 4;
    required int32 icon_id = 5;
    repeated int32 member_races = 6;
    required bool unique_name = 7;
    optional string flat_logo = 8;
    optional string flat_logo_with_name = 9;
    required int32 solar_system_id = 10;
    optional int32 militia_corporation_id = 11;
    required double size_factor = 12;
}

// Collection of all factions
message FactionCollection {
    message FactionEntry {
        required int32 faction_id = 1;
        required Faction faction_data = 2;
    }
    repeated FactionEntry factions = 1;
}

// Market group definition
message MarketGroup {
    required int32 name_id = 1;
    optional int32 description_id = 2;
    optional int32 icon_id = 3;
    optional int32 parent_group_id = 4;
    repeated int32 groups = 5;
    repeated int32 types = 6;
}

message MarketGroupCollection {
    message MarketGroupEntry {
        required int32 market_group_id = 1;
        required MarketGroup market_group_data = 2;
    }

    repeated MarketGroupEntry market_groups = 1;
}

// NPC Corporation definition
message NpcCorporation {
    required int32 corporation_id = 1;
    repeated int32 allowed_member_races = 2;
    optional int32 ceo_id = 3;
    map<int32, double> corporation_trades = 4;
    required bool deleted = 5;
    optional int32 description_id = 6;

    message Division {
        required int32 division_id = 1;
        required int32 leader_id = 2;
        required int32 size = 3;
        required int32 division_number = 4;
    }
    repeated Division divisions = 7;

    optional int32 enemy_id = 8;

    enum Extent {
        EXT_C = 1;
        EXT_G = 2;
        EXT_L = 3;
        EXT_N = 4;
        EXT_R = 5;
    }
    required Extent extent = 9;

    optional int32 faction_id = 10;
    optional int32 friend_id = 11;
    required bool has_player_personnel_manager = 12;
    optional int32 icon_id = 13;
    required double initial_price = 14;
    map<int32, int32> investors = 15;
    repeated int32 lp_offer_tables = 16;
    optional int32 main_activity_id = 17;
    required double min_security = 18;
    required bool minimum_join_standing = 19;
    required int32 name_id = 20;
    required int64 public_shares = 21;
    optional int32 race_id = 22;
    optional int32 secondary_activity_id = 23;
    required bool send_char_termination_message = 24;
    required int64 shares = 25;

    enum Size {
        SIZE_H = 1;
        SIZE_L = 2;
        SIZE_M = 3;
        SIZE_S = 4;
        SIZE_T = 5;
    }
    optional Size size = 26;

    optional double size_factor = 27;
    optional int32 solar_system_id = 28;
    optional int32 station_id = 29;
    required double tax_rate = 30;
    required string ticker_name = 31;
    required bool unique_name = 32;
}

// Station operation definition
message StationOperation {
    required int32 operation_id = 1;
    required int32 activity_id = 2;
    required double border = 3;
    required double corridor = 4;
    optional int32 description_id = 5;
    required double fringe = 6;
    required double hub = 7;
    required double manufacturing_factor = 8;
    required int32 operation_name_id = 9;
    required double ratio = 10;
    required double research_factor = 11;
    repeated int32 services = 12;
    repeated int32 station_types = 13;
}

message UniversePoint {
    required double x = 1;
    required double y = 2;
    required double z = 3;
}

message Rotation {
    required double yaw = 1;
    required double pitch = 2;
    required double roll = 3;
}

message PointRotation {
    required double x = 1;
    required double y = 2;
    required double z = 3;
}

enum WormholeClassID {
    C1 = 1;
    C2 = 2;
    C3 = 3;
    C4 = 4;
    C5 = 5;
    C6 = 6;
    HIGH_SEC_WM = 7;
    LOW_SEC_WM = 8;
    NULL_SEC_WM = 9;

    GM1 = 10;
    GM2 = 11;

    THERA = 12;
    SMALL_SHIP = 13;
    
    SENTINEL = 14;
    BARBICAN = 15;
    VIDETTE = 16;
    CONFLUX = 17;
    REDOUBT = 18;
    
    VOID_OR_ABYSSAL1 = 19;
    ABYSSAL2 = 20;
    ABYSSAL3 = 21;
    ABYSSAL4 = 22;
    ABYSSAL5 = 23;
    POCHVEN_WM = 25;
}

message Region {
    enum RegionType {
        HIGH_SEC = 1;
        LOW_SEC = 2;
        NULL_SEC = 3;
        WORMHOLE = 4;
        VOID = 5;
        ABYSSAL = 6;
        POCHVEN = 7;
    }

    required int32 region_id = 1;
    required int32 name_id = 2;
    required UniversePoint center = 3;
    optional int32 description_id = 4;
    repeated int32 neighbours = 5;
    repeated int32 constellation_ids = 6;
    repeated int32 solar_system_ids = 7;
    optional int32 faction_id = 8;
    optional WormholeClassID wormhole_class_id = 9;
    optional RegionType region_type = 10;
}

message Constellation {
    required int32 constellation_id = 1;
    required int32 name_id = 2;
    required int32 region_id = 3;
    required UniversePoint center = 4;
    repeated int32 solar_system_ids = 5;
    optional int32 faction_id = 6;
    optional WormholeClassID wormhole_class_id = 7;
    repeated int32 neighbours = 8; 
}

message SolarSystem {
    required int32 solar_system_id = 1;
    required int32 solar_system_name_id = 2;
    required bool fringe = 3;
    required bool hub = 4;
    required bool international = 5;
    required bool regional = 6;
    required bool border = 7;
    required bool corridor = 8;
    required double luminosity = 9;
    required UniversePoint position = 10;
    required UniversePoint max = 11;
    required UniversePoint min = 12;
    required double radius = 13;
    required double security = 14;
    optional int32 description_id = 15;

    repeated int32 planets = 16;

    optional WormholeClassID wormhole_class_id = 17;

    optional int32 secondary_sun = 18;

    optional string security_class = 19;
    optional int32 faction_id = 20;
    optional int32 sun_type_id = 21;
    optional int32 sun_flare_graphic_id = 22;

    optional int32 star = 23;
    repeated int32 stargates = 24;
    repeated int32 disrupted_stargates = 25;

    required int32 warp_tunnel_overwrite = 26;
    required int32 system_wide_cloud = 27;
    required string visual_effect = 28;
    repeated int32 disallowed_anchor_groups = 29;
    repeated int32 disallowed_anchor_categories = 30;
    optional bool disallow_scanning = 31;
    optional bool disallow_cyno = 32;
}

message CelestialAttributes {
    required int32 height_map1 = 1;
    required int32 height_map2 = 2;
    required bool population = 3;
    required int32 shader_preset = 4;
}

message CelestialStatistics {
    required double density = 1;
    required double escape_velocity = 2;
    required double eccentricity = 3;
    required bool fragmented = 4;
    required double life = 5;
    required bool locked = 6;
    required double mass_dust = 7;
    required double mass_gas = 8;
    required double orbit_period = 9;
    required double orbit_radius = 10;
    required double pressure = 11;
    required double radius = 12;
    required double rotation_rate = 13;
    required double surface_gravity = 14;
    required double temperature = 15;
    required string spectral_class = 16;
}

message Planet {
    required int32 planet_id = 1;
    required int32 celestial_index = 2;

    required CelestialAttributes attributes = 3;
    required UniversePoint position = 4;
    required double radius = 5;
    required int32 type_id = 6;
    required int32 solar_system_id = 7;
    optional int32 planet_name_id = 8;
    
    required CelestialStatistics statistics = 9;

    repeated int32 moons = 10;
    repeated int32 npc_stations = 11;
    repeated int32 asteroid_belts = 12;
}

message SecondarySun {
    required int32 sun_id = 1;
    required int32 type_id = 2;
    required int32 effect_beacon_type_id = 3;
    required UniversePoint position = 4;

    required int32 system_id = 5;
}

message Star {
    required int32 star_id = 1;
    required double radius = 2;
    required int32 type_id = 3;
    
    message StarStatistics {
        required double age = 1;
        required double life = 2;
        required bool locked = 3;
        required double luminosity = 4;
        required double radius = 5;
        required double temperature = 6;
        required string spectral_class = 7;
    }

    required StarStatistics statistics = 4;
    repeated int32 npc_stations = 5;

    required int32 system_id = 6;
}

message Stargate {
    required int32 stargate_id = 1;
    required int32 destination = 2;
    required UniversePoint position = 3;
    required int32 type_id = 4;
    optional Rotation rotation = 5;
    optional bool ignored_by_corporation_defense_djinn = 6;
    optional int32 allowed_ships_type_list_id = 7;

    required int32 system_id = 8;
    required int32 destination_system_id = 9;
}

message DisruptedStargate {
    required int32 stargate_id = 1;
    required int32 type_id = 2;
    required int32 target_solar_system_id = 3;
    required UniversePoint position = 4;
    required PointRotation rotation = 5;

    required int32 system_id = 6;
}

message Moon {
    required int32 moon_id = 1;
    required int32 type_id = 2;
    required CelestialAttributes attributes = 3;
    required UniversePoint position = 4;
    required double radius = 5;
    required int32 orbit_id = 6;
    optional int32 moon_name_id = 7;
    repeated int32 npc_stations = 8;

    optional CelestialStatistics statistics = 9;

    repeated int32 asteroid_belts = 10;

    message MiningBeacon {
        required UniversePoint position = 1;
    }

    optional MiningBeacon mining_beacon = 11;
    optional int32 environment_template_id = 12;

    required int32 planet_id = 13;
    required int32 celestial_index = 14;
}

message NpcStation {
    required int32 station_id = 1;
    required bool is_conquerable = 2;
    required int32 operation_id = 3;
    required int32 owner_id = 4;
    required UniversePoint position = 5;
    required double reprocessing_efficiency = 6;
    required int32 reprocessing_hangar_flag = 7;
    required double reprocessing_stations_take = 8;
    required int32 type_id = 9;
    required bool use_operation_name = 10;
    required int32 orbit_id = 11;
    required int32 graphic_id = 12;
    required int32 solar_system_id = 13;
    optional Rotation rotation = 14;
    required string station_name = 15;
    optional bool ignored_by_corporation_defense_djinn = 16;

    optional int32 moon_id = 17;
    optional int32 planet_id = 18;
    optional int32 star_id = 19;
}

message AsteroidBelt {
    required int32 asteroid_belt_id = 1;
    required int32 type_id = 2;
    optional int32 asteroid_belt_name_id = 3;
    
    optional CelestialStatistics statistics = 4;

    optional int32 planet_id = 5;
    optional int32 moon_id = 6;
}
